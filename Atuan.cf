-- programs ------------------------------------------------

entrypoints Program ;

ProgramText.   Program ::= [Top] ;

TopDef.        Top ::= Def ;
TopType.        Top ::= TypeDef ;


-- DefinitionT.   Def ::= [Ident] OptTypeAnnot "=" Expr ;

DefinitionT.   Def ::= Ident [OTIdent] OptTypeAnnot "=" Expr ;


TypedIdentifier.	TIdent ::= "(" Ident TypeAnnot ")" ;

OptionallyTypedIdentifier. 	OTIdent ::= TIdent ;

SkippedTypeIdentifier. 		OTIdent ::= Ident ;


TypeDefinition. TypeDef ::= "data" Ident [TVar] "where" [Constr] ;


TypeVariable. TVar ::= Ident ;

separator TVar " " ;


DataConstructor. Constr ::= Ident TypeAnnot  ;

separator nonempty Constr "" ;


TypeAnnotation.                              TypeAnnot   ::= "::" Type ;

OptionalTypeAnnotation.                      OptTypeAnnot ::= TypeAnnot ;
SkippedTypeAnnotation.                       OptTypeAnnot ::= ;


terminator nonempty Top ";" ;

-- Arg. 	   Arg ::= Ident;

separator  nonempty Ident "" ;

separator OTIdent " " ;


-- expressions ---------------------------------------------


CurlyBlock. Block ::= "{" Expr "}" ;


AnonymousFunction. Lambda ::= "(lambda" [OTIdent] OptTypeAnnot "=>" Expr ")" ;


EVar.      Expr9 ::= Ident ;

ELitInt.   Expr9 ::= Integer ;

ELitBool.  Expr9 ::= BoolLiteral ;

ELambda.   Expr8 ::= Lambda ;

ValList.   Val ::= Expr9 ;

ELitList.  Expr9 ::= "[" [Val] "]" ;

separator Val "," ;

EApp.      Expr7 ::= Expr9 [Expr9];


Neg.       Expr6 ::= "-" Expr7 ;

Not.       Expr6 ::= "!" Expr7 ;

EMul.      Expr5 ::= Expr5 MulOp Expr6 ;

EAdd.      Expr4 ::= Expr4 AddOp Expr5 ;

ERel.      Expr3 ::= Expr3 RelOp Expr4 ;

EAnd.      Expr2 ::= Expr3 "&&" Expr2 ;

EOr.       Expr1 ::= Expr2 "||" Expr1 ;


EMatch.    Expr1 ::= "match" Ident "with" [PatternBranch] ;

EIf.       Expr1 ::= "if" Expr2 "then" Expr2 "else" Expr2 ;

ELet.      Expr1 ::= "let" Def "in" Expr2 ; 


BranchPattern. PatternBranch ::= "(" Pattern ")" ">>>" Expr2 ;

separator nonempty PatternBranch "," ;


coercions  Expr 9 ;

separator  Expr " " ;

separator nonempty Expr9 " " ;


-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;



-- Patterns ------------------------------------------------

PatternEmptyList. ListPattern ::= "[]" ;

PatternConsList. ListPattern ::= Pattern4 ":" Pattern4 ;



PatternLiteral. Pattern5 ::= Literal ; 

-- PatternIdent. Pattern5 ::= Ident ;

PatternConstr. Pattern4 ::= Ident [Field] ;

PatternList. Pattern3 ::= ListPattern ;

coercions Pattern 5;


ConstrField. Field ::= Pattern5 ;

ConstrFieldIdent. Field ::= Ident ; 

separator Field " " ;




IntLit. Literal ::= Integer ;

BoolLit. Literal ::= BoolLiteral ;

LiteralList. Literal ::= "[" [Literal] "]" ;

ConsLit.	Expr8 ::=    Expr9 ":" Expr9 ;

separator Literal "," ;




-- Types ---------------------------------------------------

token BoolLiteral ({"True"} | {"False"}) ;


TypeInt. Type4 ::= "Int" ; 

TypeBool. Type4 ::= "Bool" ;

TypeList. Type4 ::= "[" Type "]" ; 

TypeIdent. Type4 ::= Ident;

TypeApp. Type3 ::= "(" Ident [Type4] ")";


separator nonempty Type4 " " ;


TypeFunc. Type1 ::= Type2 "->" Type1 ;  

coercions Type 4 ;


-- comments ------------------------------------------------

comment    "--" ;



