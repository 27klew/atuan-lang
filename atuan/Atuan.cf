-- programs ------------------------------------------------

entrypoints Program ;

ProgramText.   Program ::= [Top] ;

TopDef.        Top ::= Def ;
TopType.        Top ::= TypeDef ;


DefinitionT.   Def ::= [Ident] OptTypeAnnot "=" Expr ;


TypeDefinition. TypeDef ::= "data" Ident [TVar] "where" [Constr] ;


TypeVariable. TVar ::= Ident ;

separator TVar " " ;


DataConstructor. Constr ::= Ident TypeAnnot  ;

separator nonempty Constr "" ;


TypeAnnotation.                              TypeAnnot   ::= "::" Type ;

OptionalTypeAnnotation.                      OptTypeAnnot ::= TypeAnnot ;
-- SkippedTypeAnnotation.                       OptTypeAnnot ::= ;


terminator nonempty Top ";" ;

-- Arg. 	   Arg ::= Ident;

separator  nonempty Ident "" ;


-- expressions ---------------------------------------------


CurlyBlock. Block ::= "{" Expr "}" ;


AnonymousFunction. Lambda ::= "(lambda" [Ident] OptTypeAnnot "=>" Expr ")" ;


EVar.      Expr8 ::= Ident ;

ELitInt.   Expr8 ::= Integer ;

ELitBool.  Expr8 ::= BoolLiteral ;

ELambda.   Expr8 ::= Lambda ;

ValList.   Val ::= Expr8 ;

ELitList.  Expr8 ::= "[" [Val] "]" ;

separator Val "," ;

EApp.      Expr7 ::= Expr8 [Expr8];


Neg.       Expr6 ::= "-" Expr7 ;

Not.       Expr6 ::= "!" Expr7 ;

EMul.      Expr5 ::= Expr5 MulOp Expr6 ;

EAdd.      Expr4 ::= Expr4 AddOp Expr5 ;

ERel.      Expr3 ::= Expr3 RelOp Expr4 ;

EAnd.      Expr2 ::= Expr3 "&&" Expr2 ;

EOr.       Expr1 ::= Expr2 "||" Expr1 ;


EMatch.    Expr1 ::= "match" Ident "with" [PatternBranch] ;

EIf.       Expr1 ::= "if" Expr2 "then" Expr2 "else" Expr2 ;

ELet.      Expr1 ::= "let" Def "in" Expr2 ; 


BranchPattern. PatternBranch ::= "(" Pattern ")" ">>>" Expr2 ;

separator nonempty PatternBranch "," ;


coercions  Expr 8 ;

separator  Expr " " ;

separator nonempty Expr8 " " ;


-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;



-- Patterns ------------------------------------------------





PatternIdent. Pattern ::= Ident ;

PatternEmptyList. ListPattern ::= "[]" ;

PatternConsList. ListPattern ::= Ident ":" Ident;

PatternList. Pattern ::= ListPattern ;

PatternConstr. Pattern ::= Ident "(" [Field] ")" ;

ConstrField. Field ::= Ident ;

separator Field "," ;

PatternValue. Pattern ::= Literal ; 



IntLit. Literal ::= Integer ;

BoolLit. Literal ::= BoolLiteral ;

LiteralList. Literal ::= "[" [Literal] "]" ;

separator Literal "," ;




-- Types ---------------------------------------------------

token BoolLiteral ({"True"} | {"False"}) ;

TypeIdent. Type2 ::= Ident ;

-- TypeApp. Type2 ::= Ident [Ident] ;

TypeInt. Type2 ::= "Int" ; 

TypeBool. Type2 ::= "Bool" ;

TypeList. Type2 ::= "[" Type "]" ; 

TypeFunc. Type1 ::= Type2 "->" Type1 ;  

coercions Type 2 ;



-- comments ------------------------------------------------

comment    "--" ;



